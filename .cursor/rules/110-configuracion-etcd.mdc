---
title: "110-configuracion-etcd"
description: "Regla ALWAYS: toda configuraci√≥n debe obtenerse desde ETCD usando el cliente oficial en github.com/xKoRx/echo/sdk/etcd. Se proh√≠be el uso de variables de entorno y archivos YAML/JSON como fuente de configuraci√≥n."
alwaysApply: true
---

# ‚öôÔ∏è Configuraci√≥n ‚Äî Uso obligatorio de ETCD mediante SDK

## üéØ Objetivo
Centralizar y asegurar la configuraci√≥n del sistema.  
Todo desarrollo debe obtener variables de configuraci√≥n desde **ETCD**, utilizando exclusivamente el **cliente oficial en `github.com/xKoRx/echo/sdk/etcd`**.

---

## üü© Principios Obligatorios (ALWAYS)
- **ETCD √önico**: toda configuraci√≥n debe provenir de ETCD.  
- **Cliente oficial**: usa solo `github.com/xKoRxecho/sdk/etcd`.  
- **Sin Env/YAML**: prohibido usar `os.Getenv` o archivos YAML/JSON como fuente de verdad.  
- **Carga √∫nica**: inicializa configuraci√≥n una vez al inicio de la app y reutiliza instancias.  
- **Override controlado**: si es necesario, solo mediante helpers de la SDK.

---

## üö´ Anti-Patrones PROHIBIDOS
- Uso de `os.Getenv("VAR")` en hot-path o l√≥gica de negocio.  
- Archivos `config.yaml` u otros como fuente de configuraci√≥n.  
- Hardcode de secretos o par√°metros de entorno.  

## Excepci√≥n aprobada (√∫nica)
- `hostname`: debe obtenerse mediante `os.Hostname()`.
- `HOST_KEY`: debe obtenerse mediante `os.Getenv("HOST_KEY")`.
- `ENV`: debe obtenerse mediante `os.Getenv("ENV")`.

---

## ‚úÖ Ejemplo Correcto
```go
import (
    "context"
    etcdconfig "github.com/xKoRx/echo/sdk/etcd"
)

func main() {
    ctx := context.Background()
    cfg, err := etcdconfig.New(ctx, etcdconfig.WithPrefix("myapp"))
    if err != nil {
        panic(err)
    }
    dbURL := cfg.GetString("db/url")
    println("DB URL:", dbURL)
}
```

## ‚ùå Ejemplo Incorrecto
```go
dbURL := os.Getenv("DB_URL") // üö´ prohibido
```

---

## üîó Referencias
- `github.com/xKoRx/echo/sdk/etcd`
