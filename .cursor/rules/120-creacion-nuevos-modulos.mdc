---
title: "Creaci√≥n de nuevos m√≥dulos ‚Äî scaffolding est√°ndar"
description: "Gu√≠a Agent-Requested para crear un m√≥dulo **independiente** que solo dependa de di y sdk. Entrega √°rbol, plantillas y checklist para PR listo."
alwaysApply: false
---

# üöÄ Nuevo m√≥dulo: pasos y plantillas

## 1) √Årbol base
```
<module>/
  core/
    capabilities/
      foo.go
    config/
      options.go
    instrumentation/
      tracing.go
    contextx/
      attrs.go
    planner/
      runner.go        # opcional
  adapters/
    foo/local/
      source.go
      sink.go
  cmd/<module-bin>/
    main.go
  examples/
    quickstart.md
  go.mod
```

## 2) Capabilities (puertos)
```go
// core/capabilities/foo.go
package capabilities

import "context"

type FooSource interface {
  List(ctx context.Context) ([]Item, error)
}

type FooSink interface {
  Put(ctx context.Context, it Item) error
}
```

## 3) Config funcional (carga √∫nica desde ETCD)
```go
// core/config/options.go
package config

import "time"

type Options struct {
  PollInterval time.Duration
}

type Option func(*Options)

func New(opts ...Option) Options {
  o := Options{ PollInterval: 5 * time.Second }
  for _, fn := range opts { fn(&o) }
  return o
}

func WithPollInterval(d time.Duration) Option { return func(o *Options){ o.PollInterval = d } }
```

## 4) Instrumentaci√≥n m√≠nima
```go
// core/instrumentation/tracing.go
package instrumentation

import (
  "context"
  "github.com/xKoRx/echo/sdk/telemetry"
  "go.opentelemetry.io/otel/attribute"
)

func Start(ctx context.Context, op string) (context.Context, func()) {
  ctx, span := telemetry.StartSpan(ctx, "module."+op)
  return ctx, func(){ span.End() }
}

func Info(ctx context.Context, msg string, kv ...attribute.KeyValue) {
  telemetry.Info(ctx, msg, kv...)
}
```

## 5) Main con DI + carga de ETCD (√∫nica)
```go
// cmd/<module-bin>/main.go
package main

import (
  "context"
  "log"

  "github.com/xKoRx/symphony/internal/di"
  etcdconfig "github.com/xKoRx/echo/sdk/etcd"
)

func main() {
  ctx := context.Background()

  cfg, err := etcdconfig.New(ctx,
    etcdconfig.WithPrefix("symphony/development"),
  )
  if err != nil { log.Fatal(err) }

  c := di.New()                  // contenedor DI transversal
  // c.Bind(...) adapters locales, usando cfg

  if err := run(ctx, c); err != nil { log.Fatal(err) }
}
```

## 6) Reglas de importaci√≥n (pegar en README del m√≥dulo)
- ‚úÖ `github.com/xKoRx/symphony/internal/di`
- ‚úÖ `github.com/xKoRx/sdk/...`
- ‚ùå `github.com/xKoRx/<otro-m√≥dulo>/...`

## 7) Quick QA (antes del PR)
- [ ] √Årbol base creado tal cual.
- [ ] `capabilities` solo interfaces; `adapters` desacoplados.
- [ ] ETCD cargado una vez; sin env/YAML.
- [ ] Spans + m√©tricas + logs listos.
- [ ] `go test ./...` y `staticcheck ./...` verdes.
- [ ] Sin cross-module imports.

## 8) Anti-patrones (rechazar PR)
- `context.WithValue` fuera de `core/contextx` ‚ùå
- L√≥gica de dominio en `cmd/*` ‚ùå
- Config mutable en runtime ‚ùå
- Dependencias internas a otros m√≥dulos ‚ùå
