syntax = "proto3";

package echo.v1;

option go_package = "github.com/xKoRx/echo/sdk/pb/v1;echov1";

// OrderSide representa la dirección de una orden
enum OrderSide {
  ORDER_SIDE_UNSPECIFIED = 0;
  ORDER_SIDE_BUY = 1;
  ORDER_SIDE_SELL = 2;
}

// OrderType representa el tipo de orden
enum OrderType {
  ORDER_TYPE_UNSPECIFIED = 0;
  ORDER_TYPE_MARKET = 1;
  ORDER_TYPE_LIMIT = 2;
  ORDER_TYPE_STOP = 3;
  ORDER_TYPE_STOP_LIMIT = 4;
}

// OrderStatus representa el estado de una orden
enum OrderStatus {
  ORDER_STATUS_UNSPECIFIED = 0;
  ORDER_STATUS_PENDING = 1;
  ORDER_STATUS_FILLED = 2;
  ORDER_STATUS_REJECTED = 3;
  ORDER_STATUS_CANCELLED = 4;
  ORDER_STATUS_EXPIRED = 5;
}

// ErrorCode representa códigos de error específicos de trading
enum ErrorCode {
  ERROR_CODE_UNSPECIFIED = 0;
  ERROR_CODE_INVALID_PRICE = 1;
  ERROR_CODE_INVALID_STOPS = 2;
  ERROR_CODE_INVALID_VOLUME = 3;
  ERROR_CODE_MARKET_CLOSED = 4;
  ERROR_CODE_NO_MONEY = 5;
  ERROR_CODE_PRICE_CHANGED = 6;
  ERROR_CODE_OFF_QUOTES = 7;
  ERROR_CODE_BROKER_BUSY = 8;
  ERROR_CODE_REQUOTE = 9;
  ERROR_CODE_TOO_MANY_REQUESTS = 10;
  ERROR_CODE_TIMEOUT = 11;
  ERROR_CODE_TRADE_DISABLED = 12;
  ERROR_CODE_LONG_ONLY = 13;
  ERROR_CODE_SHORT_ONLY = 14;
}

// TimestampMetadata contiene los timestamps de latencia E2E
// Para medir latencia por hop desde Master EA hasta Slave EA
message TimestampMetadata {
  int64 t0_master_ea_ms = 1;      // Master EA genera intent
  int64 t1_agent_recv_ms = 2;     // Agent recibe de pipe
  int64 t2_core_recv_ms = 3;      // Core recibe de stream
  int64 t3_core_send_ms = 4;      // Core envía ExecuteOrder
  int64 t4_agent_recv_ms = 5;     // Agent recibe ExecuteOrder
  int64 t5_slave_ea_recv_ms = 6;  // Slave EA recibe comando
  int64 t6_order_send_ms = 7;     // Slave EA llama OrderSend
  int64 t7_order_filled_ms = 8;   // Slave EA recibe ticket/fill
}

